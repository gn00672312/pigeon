# -*- coding: utf-8 -*-
###############################################################################
# This file is the configuration file of filedrive service.
# Use python syntax here though it is not a .py file.
###############################################################################
#------------------------------------------------------------------------------
# The base directory to be monitored. If a relative path provided,
# the current working directory is assumed!
# Default: /data/import.
#------------------------------------------------------------------------------
#DIR_MONITOR = '/data/import'

#------------------------------------------------------------------------------
# The base directory to archive source files that need to be moved and to be
# filedrived once filedrive is done no matter it is successful or not.
# If a relative path provided, the current working directory is assumed!
# Default: /data/archive
#------------------------------------------------------------------------------
#DIR_ARCHIVE = '/data/archive'

#------------------------------------------------------------------------------
# The base directory to archive source files only when the filedrive is done
# with success. If a relative path provided, the current working directory
# is assumed here!
# Default: DIR_ARCHIVE
#------------------------------------------------------------------------------
#DIR_ARCHIVE_SUCCESS = DIR_ARCHIVE

#------------------------------------------------------------------------------
# The base directory to archive source files only when the filedrive is done
# with fail. If a relative path provided, the current working directory
# is assumed here!
# Default: DIR_ARCHIVE
#------------------------------------------------------------------------------
#DIR_ARCHIVE_FAILURE = DIR_ARCHIVE

#------------------------------------------------------------------------------
# The base directory to archive source files only if the file cannot match any
# pattern in EXEC_TASK or MOVE_TASK. If a relative path provided, the current
# working directory is assumed here!
# Default: DIR_ARCHIVE
#------------------------------------------------------------------------------
#DIR_ARCHIVE_UNKNOWN = DIR_ARCHIVE

#------------------------------------------------------------------------------
# The directory stores filedrive script to be run. If a relative path is used,
# the current working directory will be used as the prefix.
#------------------------------------------------------------------------------
#DIR_SCRIPT = ''

#------------------------------------------------------------------------------
# The maximum number of filedrive processors can be executed concurrently.
# You can't set this value to 0 since the minimum value is 1.
# Default: 10
#------------------------------------------------------------------------------
#NUM_MAX_PROCESSOR = 10

#------------------------------------------------------------------------------
# The time difference, in seconds, between file mtime and system current time
# to determine if a file can start to filedrive. The minimum allowed value is
# 5 seconds.
# Default: 60
#------------------------------------------------------------------------------
#SECS_DELAY_TO_PROCESS = 60

#------------------------------------------------------------------------------
# The time determines the maximum running time of filedrive task's actions.
# The minimum allowed value is 0 second that means executing without timeout.
# Default: 0
#------------------------------------------------------------------------------
#SECS_TIMEOUT_FOR_ACTION = 0

#------------------------------------------------------------------------------
# The settings to run filedrive program. Each item has to follow the format:
#
#     r'regular_expression_to_match_file_name': {
#         'delay': secs_delay_to_process,
#         'executable': 'the_executable_to_be_launched',
#         'script': 'the_script_to_be_run',
#         'archive': 'the_path_to_be_archived',
#         'archive_success': 'the_path_to_be_archived_if_filedrive_success',
#         'archive_failure': 'the_path_to_be_archived_if_filedrive_failure',
#     }
#
# All path relevant values can use either absolute or relative. Plus,
# for 'archive', 'archive_success', and 'archive_failure' settings,
# you can use regular expression's match group dictionary to do replacement.
#
#   * r'regular_expression_to_match_file_name': Mandatory.
#         The Python regular expression to be compared with file name.
#         The prefix 'r' is strongly recommended to avoid raising any
#         unexpected outcome. Any matched group can be used in archive,
#         archive_success, and archive_failure later.
#   * 'delay': Optional
#         The seconds delay prior to begin filedrive. It must be an integer
#         with value >= 5. If omitted or invalid type detected, the global
#         setting SECS_DELAY_TO_PROCESS will be used.
#   * 'executable': Optional
#         The executable program to be run for filedrive. If it's omitted the
#         Python executable in PATH is the default and will be used. If an
#         absolute path is used, use it. If a name is used, search it in
#         PATH. If a relative path is used, it fails.
#   * 'script': Optional.
#         The script to be executed by executable. If a relative path is given,
#         DIR_SCRIPT setting will be used as the directory to search.
#   * 'cwd': Optional.
#         The current working directory to enter before launch program.
#   * 'archive': Optional.
#         The archive path of the source file to be filedrived. If a relative
#         path is given, DIR_ARCHIVE will be used as the base directory.
#         If omitted, the source file will be moved to DIR_ARCHIVE and its
#         file name won't be changed. If multiple destinations required,
#         uses a list or a tuple to group every destination.
#   * 'archive_success': Optional.
#         The path to be archived only when the source file filedrive is
#         done with success. It shadows 'archive' if given. If a relative
#         path is given, the base directory will use DIR_ARCHIVE_SUCCESS,
#         DIR_ARCHIVE then. If omitted, uses 'archive' setting. If multiple
#         destinations required, use a list or a tuple to group every
#         destination.
#   * 'archive_failure': Optional.
#         The path to be archived only when the source file filedrive is done
#         with failure. It shadows 'archive' if given. If a relative path is
#         given, the base directory will use DIR_ARCHIVE_FAILURE, DIR_ARCHIVE
#         then. If omitted, uses 'archive' setting. If multiple destinations
#         required, use a list or a tuple to group every destination.
#
# For 'archive', 'archive_success', and 'archive_failure', some custom tags
# can be used to substitute:
#
#   * {timestamp_utc|format}
#   * {timestamp_lst|format}
#     The format uses Python's strftime() spec. If omitted, yyyymmddHHMMSS
#     will be used. Moreover, the %3f directive extends strftime to output
#     millisecond with zero-padded on the left while %-3f without.
#------------------------------------------------------------------------------
EXEC_TASK = {
    r'^(?P<file>(?P<sid>\d{4})\d(?P<yyyy>\d{4})\.(?P<mm>\d{2}))$': {
        'delay': 5,
        'executable': 'python',
        'script': 'z.py',
        'cwd': '/opt/CloudyBay',
        'action': [{
                'executable': 'python',
                'script': 'normal.py',
                'cwd': '__dev_tests',
                'timeout': 10,
            }, {
                'executable': 'python',
                'script': '__dev_tests/normal.py',
            }
        ],
        'archive':{
            'default': [
                'data/%(yyyy)s/%(mm)s/%(file)s.{timestamp_lst}',
                'data/%(yyyy)s/%(mm)s/%(file)s.{timestamp_utc}',
            ]
        },
        'queue': 'default',
    },
}

#------------------------------------------------------------------------------
# The settings to move files. Each item has to follow the format:
#
#     r'regular_expression_to_match_file_name': {
#         'delay': secs_delay_to_process,
#         'path': 'the_path_to_be_archived',
#     }
#
# All values relevant to path can use either absolute or relative. Plus,
# for 'path' settings, you can use regular expression's match group
# dictionary to do replacement.
#
#   * r'regular_expression_to_match_file_name': Mandatory.
#         The Python regular expression to be compared with file name.
#         The prefix 'r' is strongly recommended to avoid raising any
#         unexpected outcome.
#   * 'delay': Optional
#         The seconds delay prior to begin filedrive. It must be an integer
#         with value >= 5. If omitted or invalid type detected, the global
#         setting SECS_DELAY_TO_PROCESS will be used.
#   * 'path': Mandatory.
#         The path of the source file to be moved. If a relative path is
#         given, DIR_ARCHIVE setting will be used as the base directory.
#
# For 'path', some custom tags can be used to substitute:
#
#   * {timestamp_utc|format}
#   * {timestamp_lst|format}
#     The format uses Python's strftime() spec. If omitted, yyyymmddHHMMSS
#     will be used. Moreover, the %3f directive extends strftime to output
#     millisecond with zero-padded on the left while %-3f without.
#------------------------------------------------------------------------------
MOVE_TASK = {
    r'^(?P<file>(?P<sid>\d{3})\d(?P<yyyy>\d{4})\.(?P<mm>\d{2}))$': {
        'path': '/dev/null',
    },
    r'^(?P<file>MEA-RAN-(?P<yyyy>\d{4})(?P<mm>\d{2})(?P<dd>\d{2})\d{2}-.+\.png)$': {
        'path': [
            'image/%(yyyy)s/%(mm)s/%(dd)s/%(file)s',
            'image_bak/%(yyyy)s/%(mm)s/%(dd)s/%(file)s',
        ]
    },
    r'^(?P<file>MEA-LOG-(?P<yyyy>\d{4})(?P<mm>\d{2})(?P<dd>\d{2})\d{2}-\d{2}-OK)$': {
        'path': 'data/%(yyyy)s/%(mm)s/%(dd)s/%(file)s',
    },
    r'^(?P<file>M\d{2}-[^-]{3}-(?P<yyyy>\d{4})(?P<mm>\d{2})(?P<dd>\d{2})\d{2}-\d{2}-\d{2}.jpg)$': {
        'path': 'image/%(yyyy)s/%(mm)s/%(dd)s/%(file)s',
    },
    r'^(?P<file>PRO-PRO-(?P<yyyy>\d{4})(?P<mm>\d{2})(?P<dd>\d{2})\d{2}-\d+-[-a-zA-Z]+-\d+.txt)$': {
        'path': 'data/%(yyyy)s/%(mm)s/%(dd)s/%(file)s',
    },
}


QUEUE = {
    'qa': {
        'priority': 1,
        'max': 3,
    },
    'qb': {
        'priority': 2,
        'max': 3,
    },
    'default': {
        'priority': 99999999,
        'max': 1,
    }
}
